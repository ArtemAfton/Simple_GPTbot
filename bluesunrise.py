import telebot
from config import *
from telebot import types
from telebot.types import Message
import logging
from gpt import GPT


token = ""
bot = telebot.TeleBot(token)

max_letters = MAX_TOKENS

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—Ç–æ–≤ GPT
user_history = {}
current_options = {}
users = {
    "id": "",
    "question": "",
    "answer": "",
    "subject": "",
    "level": "",
}

gpt = GPT()
#create_table("users")
#create_db()

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log_file.txt",
    filemode="w",
)


def make_keyboard(buttons_list):
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(*buttons_list)
    return keyboard

def solve(message: Message):
    if(message.text == "–†–µ—à–∏—Ç—å"):return "–†–µ—à–∏—Ç—å" in message.text
    else: bot.send_message(message.chat.id, "–Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É")

@bot.message_handler(commands=["start"])
def start(message: Message):
    global current_options
    logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {message.from_user.full_name}! –ï—Å–ª–∏ –≤—ã –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤–∞–º –±—ã–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ "
                                      "—Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç–∞–π–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ Fazbear Ent.: "
                                      "'–°–∏–Ω—è—è –∑–∞—Ä—è'. –ê –∑–Ω–∞—á–∏—Ç, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –Ω—ë–º. –ß—Ç–æ –∂, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!\n –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞: "
                                      "B1D1. –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø. –ü–æ–∫–∞ –∑–∞–¥–∞—á–∏ –±–æ—Ç–∞-–ò–ò —Å–æ—Å—Ç–æ—è—Ç –≤ —Ä–µ—à–µ–Ω–∏–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á/–ø—Ä–∏–º–µ—Ä–æ–≤. "
                                      "P.S. –ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ Fazbear Ent. "
                                      "–ó–∞ —É—â–µ—Ä–±, –Ω–∞–Ω–µ—Å—ë–Ω–Ω—ã–π —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º, –∫–æ–º–ø–∞–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å—ë—Ç ü§∑‚Äç‚ôÇÔ∏è.",
                     reply_markup=make_keyboard(["–†–µ—à–∏—Ç—å"]))
    bot.register_next_step_handler(message, solve_task)
    
    users["id"] = str(message.from_user.id)

@bot.message_handler(commands=['help'])
def support(message: Message):
    logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /help")
    bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: '–†–µ—à–∏—Ç—å', –∞ –ø–æ—Ç–æ–º –ø–∏—à–∏ —É—Å–ª–æ–≤–∏–µ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏. –í –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ "
                                      "–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /solve_task")

@bot.message_handler(commands=['solve_task'])
def solvee__task(message: Message):
    logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /solve_task")
    bot.register_next_step_handler(message, solve_task)


@bot.message_handler(commands=["about"])
def about(message: Message):
    logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª /about")
    bot.send_message(message.chat.id, text1)


@bot.message_handler(content_types=["text"], func=solve)
def solve_task(message: Message):
    
    logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–æ—Ç—É")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç üôÇ:", reply_markup=make_keyboard(["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞"]))
    bot.register_next_step_handler(message, choose_subject)


def choose_subject(message):
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Ç–≤–µ—Ç–∞:", reply_markup=make_keyboard(["–ª—ë–≥–∫–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"]))
    bot.register_next_step_handler(message, choose_level)
    
    users["subject"] = message.text

def choose_level(message):
   
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
    bot.register_next_step_handler(message, get_promt)
    
    users["level"] = message.text

def continue_filter(message: Message):
    button_text = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ'
    return message.text == button_text


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
@bot.message_handler(func=continue_filter)
def get_promt(message):
    
    global current_options
    logging.debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å")
    user_id = message.from_user.id

    if message.content_type != "text":
        bot.send_message(user_id, "–£–ø—Å, —Ç—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –ø—Ä–∏—Å–ª–∞–ª. –ù–∞–¥–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º!")
        bot.register_next_step_handler(message, get_promt)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_request = message.text
    users["question"] = message.text

    gpt.count_tokens(user_request)

    #if len(user_request) > MAX_TOKENS:
        #bot.send_message(user_id, "–û–π, —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç(\n–ò—Å–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å")
        #bot.register_next_step_handler(message, get_promt)
        #return

    if user_id not in user_history or user_history[user_id] == {}:
       
        if users["subject"] not in ["–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞"]:
            bot.send_message(user_id, "–¢—ã –Ω–µ –≤–≤—ë–ª –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
            start(message)
        if users["level"] not in ["–ª—ë–≥–∫–∏–π", "—Å–ª–æ–∂–Ω—ã–π"]:
            bot.send_message(user_id, "–¢—ã –Ω–µ –≤–≤—ë–ª —É—Ä–æ–≤–µ–Ω—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.")
            start(message)

        


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ GPT –≤ —Å–ª–æ–≤–∞—Ä–∏–∫ users_history
        user_history[user_id] = {
                'system_content': f'–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ  {users["subject"]}. –î–∞–≤–∞–π –æ—Ç–≤–µ—Ç {users["level"]} —è–∑—ã–∫–æ–º.',
                'user_content': user_request,
                'assistant_content': "–†–µ—à–∏–º –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º: "
            }

    prompt = gpt.make_promt(user_history[user_id])
    resp = gpt.send_request(prompt)


    answer = gpt.process_resp(resp)
    #execute_query(f"INSERT INTO users (user_id, subject, level, task, answer) VALUES ({user_id}, –Ω–æ—Ä–º, –æ–∫,"
                  #f"'{user_request}', '{answer[1]}'")
    user_history[user_id]['assistant_content'] += answer[1]

    bot.send_message(user_id, text=user_history[user_id]['assistant_content'],
                     reply_markup=make_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ"]))
    users["answer"] = answer
    print(users)


def end_filter(message: Message):
    return message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ'



@bot.message_handler(content_types=['text'], func=end_filter)
def end_task(message: Message):
    logging.debug("–†–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æbluesunrise.py")
    user_id = message.from_user.id
    bot.send_message(user_id, "–¢–µ–∫—É—â–∏–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    user_history[user_id] = {}
    solve_task(message)

@bot.message_handler(commands=["debug"])
def debug_(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)














bot.polling()


